/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Button, ButtonInterface } from "../Button";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_sender",
        type: "address",
      },
    ],
    name: "ButtonPress",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "ClaimTreasure",
    type: "event",
  },
  {
    inputs: [],
    name: "claim_treasure",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "press_button",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060044361001e9190610029565b6000819055506100b8565b60006100348261007f565b915061003f8361007f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561007457610073610089565b5b828201905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b610529806100c76000396000f3fe60806040526004361061002d5760003560e01c80630736783d14610041578063aef4da6b1461004b5761003c565b3661003c5761003a610062565b005b600080fd5b610049610062565b005b34801561005757600080fd5b50610060610167565b005b670de0b6b3a764000034146100ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100a39061035d565b60405180910390fd5b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506003436100fa91906103e9565b600081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f3dc5b051e8d6269ad6af958d5060cb2c3d8fb92e2d7682520f5de99eb097082c60405160405180910390a2565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146101f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ee9061037d565b60405180910390fd5b436000541061023b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102329061039d565b60405180910390fd5b60034361024891906103e9565b6000819055503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610294573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167fe58b6cf1d557de014fc336a556d8a2942cd41054d887680fa87a3f5598f9e06c476040516102db91906103bd565b60405180910390a2565b60006102f2600d836103d8565b91506102fd82610478565b602082019050919050565b60006103156010836103d8565b9150610320826104a1565b602082019050919050565b60006103386013836103d8565b9150610343826104ca565b602082019050919050565b6103578161043f565b82525050565b60006020820190508181036000830152610376816102e5565b9050919050565b6000602082019050818103600083015261039681610308565b9050919050565b600060208201905081810360008301526103b68161032b565b9050919050565b60006020820190506103d2600083018461034e565b92915050565b600082825260208201905092915050565b60006103f48261043f565b91506103ff8361043f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561043457610433610449565b5b828201905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f696e636f72726563742066656500000000000000000000000000000000000000600082015250565b7f6e6f74206c617374207072657373657200000000000000000000000000000000600082015250565b7f6861736e74206265656e203320626c6f636b730000000000000000000000000060008201525056fea26469706673582212207cfe5884b4b6be6f5b52660bcf96b3eecbfbb206a1260683586d945edb0ae3aa64736f6c63430008040033";

type ButtonConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ButtonConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Button__factory extends ContractFactory {
  constructor(...args: ButtonConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Button> {
    return super.deploy(overrides || {}) as Promise<Button>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Button {
    return super.attach(address) as Button;
  }
  override connect(signer: Signer): Button__factory {
    return super.connect(signer) as Button__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ButtonInterface {
    return new utils.Interface(_abi) as ButtonInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Button {
    return new Contract(address, _abi, signerOrProvider) as Button;
  }
}
