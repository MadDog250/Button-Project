/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ButtonInterface extends utils.Interface {
  functions: {
    "claim_treasure()": FunctionFragment;
    "press_button()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "claim_treasure" | "press_button"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claim_treasure",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "press_button",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "claim_treasure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "press_button",
    data: BytesLike
  ): Result;

  events: {
    "ButtonPress(address)": EventFragment;
    "ClaimTreasure(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ButtonPress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimTreasure"): EventFragment;
}

export interface ButtonPressEventObject {
  _sender: string;
}
export type ButtonPressEvent = TypedEvent<[string], ButtonPressEventObject>;

export type ButtonPressEventFilter = TypedEventFilter<ButtonPressEvent>;

export interface ClaimTreasureEventObject {
  _sender: string;
  _value: BigNumber;
}
export type ClaimTreasureEvent = TypedEvent<
  [string, BigNumber],
  ClaimTreasureEventObject
>;

export type ClaimTreasureEventFilter = TypedEventFilter<ClaimTreasureEvent>;

export interface Button extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ButtonInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim_treasure(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    press_button(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claim_treasure(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  press_button(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claim_treasure(overrides?: CallOverrides): Promise<void>;

    press_button(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ButtonPress(address)"(_sender?: string | null): ButtonPressEventFilter;
    ButtonPress(_sender?: string | null): ButtonPressEventFilter;

    "ClaimTreasure(address,uint256)"(
      _sender?: string | null,
      _value?: null
    ): ClaimTreasureEventFilter;
    ClaimTreasure(
      _sender?: string | null,
      _value?: null
    ): ClaimTreasureEventFilter;
  };

  estimateGas: {
    claim_treasure(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    press_button(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim_treasure(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    press_button(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
